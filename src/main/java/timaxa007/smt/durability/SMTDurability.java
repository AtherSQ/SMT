package timaxa007.smt.durability;

import com.google.common.collect.Lists;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.eventhandler.EventPriority;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.block.Block;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.util.ChunkCoordinates;
import net.minecraft.world.World;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.config.ConfigCategory;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.common.config.Property;
import net.minecraftforge.event.entity.player.ItemTooltipEvent;
import net.minecraftforge.event.entity.player.PlayerInteractEvent;
import net.minecraftforge.event.world.BlockEvent;
import org.lwjgl.input.Keyboard;
import timaxa007.smt.core.SMTContainer;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

/**
 * Durability module, allows to configure blocks durability
 * After durability expires, block breaks
 * @author Dragon2488
 */
@Mod(name = "SMT: Durability", modid = "SMT|DURABILITY", version = "0.11a", dependencies = "required-after:SMT|CORE", useMetadata = true)
public class SMTDurability {

    /**
     * Instance of the module
     * Used only for design
     */
    @Mod.Instance("SMT|DURABILITY")
    public static SMTDurability instance;

    /**
     * Metadata of the module
     * used to set additional properites
     */
    @Mod.Metadata("SMT|DURABILITY")
    private ModMetadata meta;

    /**
     * Contains max durability map for blocks
     * Key is block internal name + ; + metadata
     * Metadata can be specified by '*'
     */
    private Map<String, String> maxDurability = new HashMap<>();

    /**
     * Pre-initialize module, load and parse config
     * THIS IS INTERNAL METHOD, IT SHOULDNT BE CALLED DIRECTLY!
     */
    @Mod.EventHandler
    public void preInit(FMLPreInitializationEvent event) {
        File configFile = new File(event.getModConfigurationDirectory(), "/smt/durability/Durability.cfg");
        Configuration config = new Configuration(configFile);
        config.load();
        config.setCategoryComment("blocks", "Used to indicate blocks properites by name and metadata in format:\n\n" +
                "I:\"id;meta\"=max_durability;drops_again\n\n" +
                "id - string, represents block id (example: \"minecraft:lever\")\n" +
                "meta - number in 0-15 range, represents block metadata (example: 0). Also can be '*' for any metadata value\n" +
                "max_durability - number, represents block max uses count (example: 64)\n" +
                "drops_again - true or false (example: true). if true, block will drop again after maximum amount of uses");
        ConfigCategory category = config.getCategory("blocks");
        if (config.hasChanged()) category.put("minecraft:lever;*",
                new Property("minecraft:lever;*", "64;true", Property.Type.STRING));
        for (Map.Entry<String, Property> entry : config.getCategory("blocks").entrySet())
            maxDurability.put(entry.getKey().toLowerCase(), entry.getValue().getString());
        config.save();
        MinecraftForge.EVENT_BUS.register(this);
    }

    /**
     * Initialize module meta-properites, such as description and logo
     * THIS IS INTERNAL METHOD, IT SHOULDNT BE CALLED DIRECTLY!
     */
    @Mod.EventHandler
    public void init(FMLInitializationEvent event) {
        meta.url = "http://forum.mcmodding.ru/viewtopic.php?id=4";
        meta.authorList = Lists.newArrayList("Dragon2488");
        meta.description = "SMT: Durability makes some blocks break after some amount of uses. " +
                "Example: lever breaks after 64 uses. It's fully configurable, see examples and uses in config.";
        meta.logoFile = "/smt_durability_logo.png";
        meta.autogenerated = false;
    }

    /**
     * Handles block right-click. If block has durability, this method
     * manages block durability and break block if durability expires
     * THIS IS INTERNAL METHOD, IT SHOULDNT BE CALLED DIRECTLY!
     */
    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onBlockUse(PlayerInteractEvent event) {
        if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
            World world = event.world;
            int x = event.x;
            int y = event.y;
            int z = event.z;
            Block block = world.getBlock(x, y, z);
            int meta = world.getBlockMetadata(x, y, z);
            String blockName = Block.blockRegistry.getNameForObject(block).toLowerCase();
            boolean containsAny = maxDurability.containsKey(blockName + ";*");
            if (maxDurability.containsKey(blockName + ";" + meta) || containsAny) {
                String[] infoParts = maxDurability.get(containsAny ?
                        blockName + ";*" : blockName + ";" + meta).split(";");
                ChunkCoordinates coordinates = new ChunkCoordinates(x, y, z);
                DurabilityWorldData data = DurabilityWorldData.createOrLoad(world);
                int durabilityLeft = data.getDurability(coordinates);
                if (durabilityLeft == 0) durabilityLeft = Integer.parseInt(infoParts[0]);
                data.setDurability(coordinates, --durabilityLeft);
                if (durabilityLeft <= 0) {
                    if (Boolean.parseBoolean(infoParts[1]) && !world.isRemote)
                        for (ItemStack stack : block.getDrops(world, x, y, z, meta, 0))
                            world.spawnEntityInWorld(new EntityItem(world, x + 0.5, y + 0.5, z + 0.5, stack));
                    SMTContainer.network.sendToArea(new PacketBlockBreakEffects(x, y, z, block, meta),
                            x * 1D, y * 1D, z * 1D, 16D, world.provider.dimensionId);
                    block.breakBlock(world, x, y, z, block, meta);
                    world.setBlockToAir(x, y, z);
                }
            }
        }
    }

    /**
     * Handles block break. If block has durability, this method
     * removes useless old durability data of the block
     * THIS IS INTERNAL METHOD, IT SHOULDNT BE CALLED DIRECTLY!
     */
    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onBlockBreak(BlockEvent.BreakEvent event) {
        String blockName = Block.blockRegistry.getNameForObject(event.block).toLowerCase() + ";" + event.blockMetadata;
        if (maxDurability.containsKey(blockName + ";" + event.blockMetadata) || maxDurability.containsKey(blockName + ";*"))
            DurabilityWorldData.createOrLoad(event.world).setDurability(new ChunkCoordinates(event.x, event.y, event.z), 0);
    }

    /**
     * Handles items tooltips. If item is block, which have durability, this method
     * adds hints to the item description. LSHIFT is used as 'more info' key
     * THIS IS INTERNAL METHOD, IT SHOULDNT BE CALLED DIRECTLY!
     */
    @SideOnly(Side.CLIENT)
    @SubscribeEvent(priority = EventPriority.LOWEST)
    public void onTooltipRender(ItemTooltipEvent event) {
        ItemStack stack = event.itemStack;
        if (stack.getItem() instanceof ItemBlock) {
            ItemBlock itemBlock = (ItemBlock) stack.getItem();
            String blockName = Block.blockRegistry.getNameForObject(itemBlock.field_150939_a).toLowerCase();
            boolean containsAny = maxDurability.containsKey(blockName + ";*");
            if (maxDurability.containsKey(blockName + ";" + itemBlock.getMetadata(stack.getItemDamage())) || containsAny) {
                if (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT)) {
                    String[] infoParts = maxDurability.get(containsAny ? blockName + ";*" : blockName + ";" + meta).split(";");
                    event.toolTip.add("§7Durability: " + infoParts[0]);
                    event.toolTip.add("§7Drops on break: " + infoParts[1]);
                } else event.toolTip.add("§7§oPress LSHIFT for more info");
            }
        }
    }

}
