package smt.core;

import com.google.common.collect.Lists;
import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import cpw.mods.fml.common.*;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import org.apache.logging.log4j.Logger;
import smt.core.network.NetworkManager;
import smt.core.plugin.SMTCorePlugin;
import smt.core.sound.SoundHelper;

import java.io.File;
import java.util.List;

/**
 * Primary container, contains useful
 * core content, provided to sub-modules
 * @author Dragon2488
 */
public class SMTContainer extends DummyModContainer {

    /**
     * Instance of this container,
     * can't be null
     */
    public static SMTContainer instance;

    /**
     * Primary logger, similar to SMTCorePlugin logger
     * @see smt.core.plugin.SMTCorePlugin
     */
    public static Logger log;

    /**
     * Primary network manager, used to
     * send and receive all mod packets
     */
    public static NetworkManager network;

    /**
     * Simple wrapper around minecraft sound manager
     * Used for easy sounds registration and playing, stopping
     */
    @SideOnly(Side.CLIENT)
    public static SoundHelper soundManager;

    /**
     * Initializes mod container and
     * fill it with meta info
     */
    public SMTContainer() {
        super(new ModMetadata());
        ModMetadata meta = getMetadata();
        meta.modId = "SMT|CORE";
        meta.name = "SMT: Core";
        meta.version = "0.11a";
        meta.url = "http://forum.mcmodding.ru/viewtopic.php?id=4";
        meta.authorList = Lists.newArrayList("timaxa007", "Dragon2488");
        meta.description = "SMT: Core provides ability to run other SMT modules, such as: " +
                "SMT: Decorations, SMT: Technology, SMT: Magic, SMT: Cookery, SMT: Durability and SMT: Environment";
        meta.logoFile = "/smt_core_logo.png";
        meta.autogenerated = false;
        log = SMTCorePlugin.log;
        instance = this;
    }

    /**
     * Performs early load, such as network manager init
     * THIS IS INTERNAL METHOD, IT SHOULDNT BE CALLED DIRECTLY!
     */
    @Subscribe
    public void preInit(FMLPreInitializationEvent event) {
        network = new NetworkManager(getModId());
    }

    /**
     * Performs post load, such as sound system init
     * THIS IS INTERNAL METHOD, IT SHOULDNT BE CALLED DIRECTLY!
     */
    @Subscribe
    public void postInit(FMLPostInitializationEvent event) {
        if(FMLCommonHandler.instance().getSide().isClient())
            soundManager = new SoundHelper();
    }

    /**
     * Overrides dummy mod container method
     * We should receive events, so we need to return true
     * @return true if mod registers bus
     */
    @Override
    public boolean registerBus(EventBus bus, LoadController controller) {
        bus.register(this);
        return true;
    }

    /**
     * Overrides dummy mod container method
     * @return source of mod, null if unavailable
     */
    @Override
    public File getSource() {
        return SMTCorePlugin.coremodLocation;
    }

    /**
     * Overrides dummy mod container method
     * @return this container, it's mod object
     */
    @Override
    public Object getMod() {
        return this;
    }

    /**
     * Overrides dummy mod container method
     * @return true if mod is this, otherwise false
     */
    @Override
    public boolean matches(Object mod) {
        return getMod() == mod;
    }

    /**
     * Used to display disablable button
     * Core isn't disablable, button is disabled
     * @return is mod disablable
     */
    @Override
    public Disableable canBeDisabled() {
        return Disableable.NEVER;
    }

    /**
     * Used to get list of core-owned packages
     * @return list of mod-owned packages, currently only one package
     */
    @Override
    public List<String> getOwnedPackages() {
        return Lists.newArrayList("timaxa007.tms.core");
    }
}
